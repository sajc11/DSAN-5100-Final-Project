install.packages("tidyverse")   # For data wrangling and visualization
install.packages("readr")       # For reading CSV files
install.packages("ggplot2")     # For plotting
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
# Load the cleaned dataset
data <- read_csv("data/cleaned_housing_risk_data.csv")
# Load the cleaned dataset
data <- read_csv("./data/cleaned_housing_risk_data.csv")
# Load the cleaned dataset
data <- read_csv("/data/cleaned_housing_risk_data.csv")
setwd("~/DSAN 5100/DSAN_5100_Final")
# Load the cleaned dataset
data <- read_csv("data/cleaned_housing_risk_data.csv")
# Install and load libraries
install.packages("tidyverse")   # For data wrangling and visualization
install.packages("readr")       # For reading CSV files
install.packages("ggplot2")     # For plotting
library(tidyverse)
library(readr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(ggplot2)
library(tidyverse)
library(readr)
library(ggplot2)
# Load the cleaned dataset
data <- read_csv("data/cleaned_housing_risk_data.csv")
# Normalize the total risk score
data$total_risk_score <- data$total_risk_score / 36
head(housing_data)
# Load the cleaned dataset
data <- read_csv("data/cleaned_housing_risk_data.csv")
# Normalize the total risk score
data$total_risk_score <- data$total_risk_score / 36
head(data)
# Summary statistics for eviction and foreclosure rates
eviction_foreclosure_stats <- housing_data %>%
summarise(
mean_eviction_rate = mean(rate_eviction_filings, na.rm = TRUE),
median_eviction_rate = median(rate_eviction_filings, na.rm = TRUE),
mean_foreclosure_rate = mean(rate_forclosure_filings, na.rm = TRUE),
median_foreclosure_rate = median(rate_forclosure_filings, na.rm = TRUE)
)
# Summary statistics for eviction and foreclosure rates
eviction_foreclosure_stats <- data %>%
summarise(
mean_eviction_rate = mean(rate_eviction_filings, na.rm = TRUE),
median_eviction_rate = median(rate_eviction_filings, na.rm = TRUE),
mean_foreclosure_rate = mean(rate_forclosure_filings, na.rm = TRUE),
median_foreclosure_rate = median(rate_forclosure_filings, na.rm = TRUE)
)
# Print summary statistics
print(eviction_foreclosure_stats)
ggplot(data, aes(x = reorder(district, rate_eviction_filings), y = rate_eviction_filings, fill = rate_eviction_filings)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(
title = "Eviction Rates by District",
x = "District",
y = "Eviction Rate"
)
ggplot(data, aes(x = reorder(district, rate_forclosure_filings), y = rate_forclosure_filings, fill = rate_forclosure_filings)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(
title = "Foreclosure Rates by District",
x = "District",
y = "Foreclosure Rate"
)
ggplot(data, aes(x = rate_eviction_filings, y = rate_forclosure_filings)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue") +
theme_minimal() +
labs(
title = "Eviction vs Foreclosure Rates",
x = "Eviction Rate",
y = "Foreclosure Rate"
)
housing_by_borough <- data %>%
mutate(borough = str_extract(district, "^[A-Z]+")) %>%
group_by(borough) %>%
summarise(
avg_eviction_rate = mean(rate_eviction_filings, na.rm = TRUE),
avg_foreclosure_rate = mean(rate_forclosure_filings, na.rm = TRUE)
)
# Preview borough-level summary
print(housing_by_borough)
# Eviction Rates by Borough
ggplot(housing_by_borough, aes(x = reorder(borough, avg_eviction_rate), y = avg_eviction_rate, fill = avg_eviction_rate)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(
title = "Average Eviction Rates by Borough",
x = "Borough",
y = "Eviction Rate"
)
# Foreclosure Rates by Borough
ggplot(housing_by_borough, aes(x = reorder(borough, avg_foreclosure_rate), y = avg_foreclosure_rate, fill = avg_foreclosure_rate)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(
title = "Average Foreclosure Rates by Borough",
x = "Borough",
y = "Foreclosure Rate"
)
# Correlation matrix for housing-related variables
housing_correlation <- data %>%
select(rate_eviction_filings, rate_forclosure_filings, total_risk_score) %>%
cor(use = "pairwise.complete.obs")
# Print the correlation matrix
print(housing_correlation)
# Correlation matrix for housing-related variables
housing_correlation <- data %>%
select(rate_eviction_filings, rate_forclosure_filings, total_risk_score) %>%
cor(use = "pairwise.complete.obs")
# Print the correlation matrix
print(housing_correlation)
# Example: Divide eviction rates into categories
housing_data <- housing_data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Example: Divide eviction rates into categories
housing_data <- data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Example: Eviction rate categories by borough
contingency_table <- table(data$eviction_rate_category, housing_data$borough)
# Example: Divide eviction rates into categories
data <- data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Check if eviction_rate_category was created successfully
table(data$eviction_rate_category)
# Example: Eviction rate categories by borough
contingency_table <- table(data$eviction_rate_category, housing_data$borough)
# Example: Eviction rate categories by borough
contingency_table <- table(data$eviction_rate_category, data$borough)
# Example: Divide eviction rates into categories
data <- data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Check if eviction_rate_category was created successfully
table(data$eviction_rate_category)
length(data$eviction_rate_category)
length(data$borough)
# Example: Eviction rate categories by borough
contingency_table <- table(data$eviction_rate_category, data$borough)
# Example: Divide eviction rates into categories
data <- data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Check if eviction_rate_category was created successfully
table(data$eviction_rate_category)
data <- data %>%
mutate(borough = str_extract(district, "^[A-Z]+"))
# Check unique borough values
print(unique(data$borough))
# Example: Divide eviction rates into categories
data <- data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Check if eviction_rate_category was created successfully
table(data$eviction_rate_category)
data <- data %>%
mutate(borough = str_extract(district, "^[A-Z]+"))
# Check unique borough values
print(unique(data$borough))
if (any(is.na(data$borough))) {
warning("Some rows in 'borough' column are missing.")
}
# Example: Divide eviction rates into categories
data <- data %>%
mutate(eviction_rate_category = cut(rate_eviction_filings,
breaks = c(-Inf, 0.02, 0.05, Inf),
labels = c("Low", "Medium", "High")))
# Check if eviction_rate_category was created successfully
table(data$eviction_rate_category)
data <- data %>%
mutate(borough = str_extract(district, "^[A-Z]+"))
# Check unique borough values
print(unique(data$borough))
if (any(is.na(data$borough))) {
warning("Some rows in 'borough' column are missing.")
}
print(length(data$eviction_rate_category))
print(length(data$borough))
# Create the contingency table
contingency_table <- table(data$eviction_rate_category, data$borough)
print(contingency_table)
# Run the test if the contingency table has sufficient entries
if (all(dim(contingency_table) > 1)) {
chi_squared_test <- chisq.test(contingency_table)
print(chi_squared_test)
} else {
warning("Contingency table has insufficient data for Chi-Squared Test.")
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(ggplot2)
# Load the cleaned dataset
data <- read_csv("data/cleaned_housing_risk_data.csv")
# Normalize the total risk score
data$total_risk_score <- data$total_risk_score / 36
head(data)
# Summary statistics for eviction and foreclosure rates
eviction_foreclosure_stats <- data %>%
summarise(
mean_eviction_rate = mean(rate_eviction_filings, na.rm = TRUE),
median_eviction_rate = median(rate_eviction_filings, na.rm = TRUE),
mean_foreclosure_rate = mean(rate_forclosure_filings, na.rm = TRUE),
median_foreclosure_rate = median(rate_forclosure_filings, na.rm = TRUE)
)
# Print summary statistics
print(eviction_foreclosure_stats)
evic_dist <- ggplot(data, aes(x = reorder(district, rate_eviction_filings), y = rate_eviction_filings, fill = rate_eviction_filings)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(
title = "Eviction Rates by District",
x = "District",
y = "Eviction Rate"
)
evic_dist
ggsave("figures/evic_dist.png", plot = evic_dist, width = 8, height = 6)
for_dist <- ggplot(data, aes(x = reorder(district, rate_forclosure_filings), y = rate_forclosure_filings, fill = rate_forclosure_filings)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(
title = "Foreclosure Rates by District",
x = "District",
y = "Foreclosure Rate"
)
for_dist
ggsave("figures/for_dist.png", plot = for_dist, width = 8, height = 6)
corr_evic_for <- ggplot(data, aes(x = rate_eviction_filings, y = rate_forclosure_filings)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue") +
theme_minimal() +
labs(
title = "Eviction vs Foreclosure Rates",
x = "Eviction Rate",
y = "Foreclosure Rate"
)
corr_evic_for
ggsave("figures/corr_evic_for.png", plot = corr_evic_for, width = 8, height = 6)
# Run the test given that the contingency table has sufficient entries - should work
if (all(dim(contingency_table) > 1)) {
chi_squared_test <- chisq.test(contingency_table)
print(chi_squared_test)
} else {
warning("Contingency table has insufficient data for Chi-Squared Test.")
}
# Example: Divide foreclosure rates into categories
data <- data %>%
mutate(foreclosure_rate_category = cut(rate_forclosure_filings,
breaks = c(-Inf, 0.005, 0.01, Inf),
labels = c("Low", "Medium", "High")))
# Check if foreclosure_rate_category was created successfully
table(data$foreclosure_rate_category)
# Check unique borough values
data <- data %>%
mutate(borough = str_extract(district, "^[A-Z]+"))
print(unique(data$borough))
# Create the contingency table for foreclosure rate categories by borough
contingency_table_foreclosure <- table(data$foreclosure_rate_category, data$borough)
print(contingency_table_foreclosure)
# Run the test given that the contingency table has sufficient entries
if (all(dim(contingency_table_foreclosure) > 1)) {
chi_squared_test_foreclosure <- chisq.test(contingency_table_foreclosure)
print(chi_squared_test_foreclosure)
} else {
warning("Contingency table has insufficient data for Chi-Squared Test.")
}
# View expected frequencies for the foreclosure rates
if (exists("chi_squared_test_foreclosure")) {
print(chi_squared_test_foreclosure$expected)
}
# Run Fisher's Exact Test for foreclosure rates (if necessary)
if (any(chi_squared_test_foreclosure$expected < 5)) {
fisher_test_foreclosure <- fisher.test(contingency_table_foreclosure)
print(fisher_test_foreclosure)
}
# Visualize the contingency table as a heatmap
ggplot(as.data.frame(as.table(contingency_table_foreclosure)), aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal() +
labs(title = "Foreclosure Rate Categories by Borough", x = "Borough", y = "Foreclosure Rate Category")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(kableExtra)
# 4. Rent burden analysis
rent_burden <- ggplot(nyc_evictions, aes(x = borough_full, y = `rent-burden`, fill = borough_simple)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Rent Burden Distribution by Borough",
x = "Borough",
y = "Rent Burden (%)") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(kableExtra)
# Read the CSV files
queens_bronx_manhattan <- read_csv("./data/eviction_stats_Queens_Bronx_Manhattan.csv")
queens_richmond <- read_csv("./data/eviction_stats_Brooklyn_Richmond.csv")
# Combine the datasets
nyc_evictions <- bind_rows(queens_bronx_manhattan, queens_richmond) %>%
# Remove any potential duplicates
distinct() %>%
# Sort by year and county name
arrange(year, name) %>%
# Create a borough column without "County"
mutate(borough = str_replace(name, " County", ""))
# Create data dictionary
data_dictionary <- tribble(
~Column, ~Description,
"GEOID", "Census FIPS code for 2010 geography",
"name", "Census location name",
"parent-location", "Parent location in Census hierarchy",
"population", "Total population",
"poverty-rate", "% of population with income below poverty level",
"pct-renter-occupied", "% of occupied housing units that are renter-occupied",
"median-gross-rent", "Median gross rent",
"median-household-income", "Median household income",
"median-property-value", "Median property value",
"rent-burden", "Median gross rent as % of household income (max 50%)",
"pct-white", "% population White alone, not Hispanic/Latino",
"pct-af-am", "% population Black/African American alone, not Hispanic/Latino",
"pct-hispanic", "% population Hispanic/Latino origin",
"pct-am-ind", "% population American Indian/Alaska Native alone, not Hispanic/Latino",
"pct-asian", "% population Asian alone, not Hispanic/Latino",
"pct-nh-pi", "% population Native Hawaiian/Pacific Islander alone, not Hispanic/Latino",
"pct-other", "% population other race alone, not Hispanic/Latino",
"pct-multiple", "% population two or more races, not Hispanic/Latino",
"households-threatened", "Number of unique households receiving eviction filing",
"eviction-filings", "All eviction cases filed, including multiple cases against same address",
"households-threatened-rate", "% of unique households receiving eviction filing",
"eviction-filing-rate", "Ratio of evictions filed to renter-occupied homes",
"filings-per-day", "Number of eviction filings per day"
)
# Display basic information about the dataset
cat("NYC Eviction Dataset Summary\n")
cat("==========================\n")
cat("Time period:", min(nyc_evictions$year), "-", max(nyc_evictions$year), "\n")
cat("Boroughs included:", paste(unique(nyc_evictions$borough), collapse=", "), "\n")
cat("Total records:", nrow(nyc_evictions), "\n")
cat("Number of columns:", ncol(nyc_evictions), "\n\n")
# Display first few rows of the dataset
head(nyc_evictions) %>%
select(year, borough, population, `eviction-filings`, `households-threatened`) %>%
kable(caption = "Sample of NYC Eviction Data") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Display data dictionary
data_dictionary %>%
kable(caption = "Data Dictionary") %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
position = "left")
# Save combined dataset if needed
write_csv(nyc_evictions, "./data/nyc_eviction_data_combined.csv")
# Load additional required packages
library(ggplot2)
library(scales)
library(gridExtra)
# Create simplified borough mapping
borough_mapping <- c(
"New York" = "Manhattan (NY)",
"Kings" = "Brooklyn (K)",
"Queens" = "Queens (Q)",
"Bronx" = "The Bronx (B)",
"Richmond" = "Staten Island (R)"
)
# Update the borough names in the dataset
nyc_evictions <- nyc_evictions %>%
mutate(borough_simple = borough_mapping[borough])
# 1. Temporal Trends of Evictions by Borough
temporal_evic_borough <- ggplot(nyc_evictions, aes(x = year, y = `eviction-filings`, color = borough_simple)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Eviction Filings Over Time by Borough",
x = "Year",
y = "Number of Eviction Filings",
color = "Borough") +
scale_y_continuous(labels = comma) +
theme(legend.position = "bottom",
legend.text = element_text(size = 7))
temporal_evic_borough
ggsave("figures/Yearly_Eviction/temporal_evic_borough.png", plot = temporal_evic_borough, width = 8, height = 6)
# 2. Relationship between Poverty Rate and Eviction Filing Rate
poverty_evic <- ggplot(nyc_evictions, aes(x = `poverty-rate`, y = `eviction-filing-rate`, color = borough_simple)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Poverty Rate vs Eviction Filing Rate",
x = "Poverty Rate (%)",
y = "Eviction Filing Rate",
color = "Borough") +
theme(legend.position = "bottom",
legend.text = element_text(size = 8))
poverty_evic
ggsave("figures/Yearly_Eviction/poverty_evic.png", plot = poverty_evic, width = 8, height = 6)
# 3. Summary statistics by borough
borough_summary <- nyc_evictions %>%
group_by(borough_simple) %>%
summarise(
avg_eviction_rate = mean(`eviction-filing-rate`),
avg_poverty_rate = mean(`poverty-rate`),
avg_rent_burden = mean(`rent-burden`),
avg_median_rent = mean(`median-gross-rent`),
total_filings = sum(`eviction-filings`)
) %>%
arrange(desc(avg_eviction_rate))
# Display summary statistics
kable(borough_summary,
col.names = c("Borough", "Avg Eviction Rate", "Avg Poverty Rate",
"Avg Rent Burden", "Avg Median Rent", "Total Filings"),
caption = "Borough-level Summary Statistics",
digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# 4. Rent burden analysis
rent_burden <- ggplot(nyc_evictions, aes(x = borough_full, y = `rent-burden`, fill = borough_simple)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Rent Burden Distribution by Borough",
x = "Borough",
y = "Rent Burden (%)") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
rent_burden
# 4. Rent burden analysis
rent_burden <- ggplot(nyc_evictions, aes(x = borough_simple, y = `rent-burden`, fill = borough_simple)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Rent Burden Distribution by Borough",
x = "Borough",
y = "Rent Burden (%)") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
rent_burden
ggsave("figures/Yearly_Eviction/rent_burden.png", plot = rent_burden, width = 8, height = 6)
# 5. Correlation between median rent and eviction rates
med_gross_rent_evic <- ggplot(nyc_evictions, aes(x = `median-gross-rent`, y = `eviction-filing-rate`,
color = borough_simple)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Median Gross Rent vs Eviction Filing Rate",
x = "Median Gross Rent ($)",
y = "Eviction Filing Rate",
color = "Borough") +
scale_x_continuous(labels = dollar) +
theme(legend.position = "bottom",
legend.text = element_text(size = 8))
med_gross_rent_evic
ggsave("figures/Yearly_Eviction/med_gross_rent_evic.png", plot = med_gross_rent_evic, width = 8, height = 6)
# 6. Demographic analysis
demographic_summary <- nyc_evictions %>%
group_by(borough_simple) %>%
summarise(
white = mean(`pct-white`),
black = mean(`pct-af-am`),
hispanic = mean(`pct-hispanic`),
asian = mean(`pct-asian`)
) %>%
pivot_longer(cols = -borough_simple,
names_to = "demographic",
values_to = "percentage")
demog_comp_borough <- ggplot(demographic_summary, aes(x = borough_simple, y = percentage, fill = demographic)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Demographic Composition by Borough",
x = "Borough",
y = "Percentage",
fill = "Demographic Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
demog_comp_borough
ggsave("figures/Yearly_Eviction/demog_comp_borough.png", plot = demog_comp_borough, width = 8, height = 6)
# 7. Time series of households threatened vs actual filings
time_series <- ggplot(nyc_evictions, aes(x = year)) +
geom_line(aes(y = `households-threatened`, color = "Households Threatened")) +
geom_line(aes(y = `eviction-filings`, color = "Eviction Filings")) +
facet_wrap(~borough_simple, scales = "free_y") +
theme_minimal() +
labs(title = "Households Threatened vs Actual Eviction Filings",
x = "Year",
y = "Count",
color = "Metric") +
scale_y_continuous(labels = comma) +
theme(strip.text = element_text(size = 7))
time_series
ggsave("figures/Yearly_Eviction/time_series.png", plot = time_series, width = 8, height = 6)
